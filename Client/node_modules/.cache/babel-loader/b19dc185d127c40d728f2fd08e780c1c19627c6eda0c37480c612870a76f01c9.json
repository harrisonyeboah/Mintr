{"ast":null,"code":"var _jsxFileName = \"/Users/harrisonyeboah/Desktop/Mintr/Mintr/Client/src/context/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isDarkMode, setIsDarkMode] = useState(true); // Start with dark mode\n\n  // Load theme preference from localStorage on mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('mintr-theme');\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    }\n  }, []);\n\n  // Save theme preference to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('mintr-theme', isDarkMode ? 'dark' : 'light');\n    // Update CSS custom properties\n    document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  const value = {\n    isDarkMode,\n    toggleTheme,\n    theme: isDarkMode ? 'dark' : 'light'\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s2(ThemeProvider, \"YOAWQZRLseyj1CECHtpxPgWaN24=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","setItem","document","documentElement","setAttribute","toggleTheme","value","theme","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harrisonyeboah/Desktop/Mintr/Mintr/Client/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n    const context = useContext(ThemeContext);\n    if (!context) {\n        throw new Error('useTheme must be used within a ThemeProvider');\n    }\n    return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n    const [isDarkMode, setIsDarkMode] = useState(true); // Start with dark mode\n\n    // Load theme preference from localStorage on mount\n    useEffect(() => {\n        const savedTheme = localStorage.getItem('mintr-theme');\n        if (savedTheme) {\n            setIsDarkMode(savedTheme === 'dark');\n        }\n    }, []);\n\n    // Save theme preference to localStorage when it changes\n    useEffect(() => {\n        localStorage.setItem('mintr-theme', isDarkMode ? 'dark' : 'light');\n        // Update CSS custom properties\n        document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');\n    }, [isDarkMode]);\n\n    const toggleTheme = () => {\n        setIsDarkMode(!isDarkMode);\n    };\n\n    const value = {\n        isDarkMode,\n        toggleTheme,\n        theme: isDarkMode ? 'dark' : 'light'\n    };\n\n    return (\n        <ThemeContext.Provider value={value}>\n            {children}\n        </ThemeContext.Provider>\n    );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,OAAO,GAAGR,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACnE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACZD,aAAa,CAACC,UAAU,KAAK,MAAM,CAAC;IACxC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAb,SAAS,CAAC,MAAM;IACZc,YAAY,CAACE,OAAO,CAAC,aAAa,EAAEL,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;IAClE;IACAM,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAER,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;EACtF,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACtBR,aAAa,CAAC,CAACD,UAAU,CAAC;EAC9B,CAAC;EAED,MAAMU,KAAK,GAAG;IACVV,UAAU;IACVS,WAAW;IACXE,KAAK,EAAEX,UAAU,GAAG,MAAM,GAAG;EACjC,CAAC;EAED,oBACIT,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAZ,QAAA,EAC/BA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC,CAAC;AAACjB,GAAA,CAjCWF,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}