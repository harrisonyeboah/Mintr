{"ast":null,"code":"var _jsxFileName = \"/Users/harrisonyeboah/Desktop/Mintr/Mintr/Client/src/pages/ForgotPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForgetPassword = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const handleChange = e => {\n    setEmail(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/forgotpassword', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        // üëà include cookies\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage('Password reset link has been sent to your email.');\n      } else {\n        setMessage(data.error || 'Something went wrong.');\n      }\n    } catch (err) {\n      setMessage('Server error. Please try again later.');\n    }\n    setEmail(''); // clear email input\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"logoName\",\n          children: \"Mintr\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"login-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Forgot Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"subtitle\",\n          children: \"Enter your email to reset your password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            name: \"email\",\n            value: email,\n            onChange: handleChange,\n            placeholder: \"Enter your email\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signup-link\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Remembered your password?\", ' ', /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            className: \"link\",\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(ForgetPassword, \"mxdRTHxkiTeLOv2akPbesFCh75U=\");\n_c = ForgetPassword;\nexport const resetPassword = async (req, res) => {\n  const {\n    token\n  } = req.params; // token from URL (reset-password/:token)\n  const {\n    password\n  } = req.body; // new password from frontend form\n\n  try {\n    // 1Ô∏è‚É£ Verify token\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n    // 2Ô∏è‚É£ Find user\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return res.status(400).json({\n        message: \"Invalid or expired token\"\n      });\n    }\n\n    // 3Ô∏è‚É£ Hash new password\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    // 4Ô∏è‚É£ Update user‚Äôs password\n    user.password = hashedPassword;\n    await user.save();\n    return res.json({\n      message: \"Password updated successfully\"\n    });\n  } catch (err) {\n    console.error(\"Reset password error:\", err);\n    return res.status(400).json({\n      message: \"Invalid or expired token\"\n    });\n  }\n};\nexport default ForgetPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgetPassword\");","map":{"version":3,"names":["React","useState","Link","jsxDEV","_jsxDEV","ForgetPassword","_s","email","setEmail","message","setMessage","handleChange","e","target","value","handleSubmit","preventDefault","response","fetch","method","headers","credentials","body","JSON","stringify","data","json","ok","error","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","name","onChange","placeholder","required","to","_c","resetPassword","req","res","token","params","password","decoded","jwt","verify","process","env","JWT_SECRET","user","User","findById","userId","status","salt","bcrypt","genSalt","hashedPassword","hash","save","console","$RefreshReg$"],"sources":["/Users/harrisonyeboah/Desktop/Mintr/Mintr/Client/src/pages/ForgotPassword.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ForgetPassword = () => {\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n\n  const handleChange = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch('/api/forgotpassword', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include', // üëà include cookies\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setMessage('Password reset link has been sent to your email.');\n      } else {\n        setMessage(data.error || 'Something went wrong.');\n      }\n    } catch (err) {\n      setMessage('Server error. Please try again later.');\n    }\n\n    setEmail(''); // clear email input\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"logo\">\n          <h1 className=\"logoName\">Mintr</h1>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"login-form\">\n          <h2>Forgot Password</h2>\n          <p className=\"subtitle\">Enter your email to reset your password</p>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={handleChange}\n              placeholder=\"Enter your email\"\n              required\n            />\n          </div>\n\n          <button type=\"submit\" className=\"login-button\">\n            Reset Password\n          </button>\n        </form>\n\n        {message && <p className=\"status-message\">{message}</p>}\n\n        <div className=\"signup-link\">\n          <p>\n            Remembered your password?{' '}\n            <Link to=\"/login\" className=\"link\">Sign in</Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const resetPassword = async (req, res) => {\n  const { token } = req.params; // token from URL (reset-password/:token)\n  const { password } = req.body; // new password from frontend form\n\n  try {\n    // 1Ô∏è‚É£ Verify token\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n    // 2Ô∏è‚É£ Find user\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return res.status(400).json({ message: \"Invalid or expired token\" });\n    }\n\n    // 3Ô∏è‚É£ Hash new password\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    // 4Ô∏è‚É£ Update user‚Äôs password\n    user.password = hashedPassword;\n    await user.save();\n\n    return res.json({ message: \"Password updated successfully\" });\n  } catch (err) {\n    console.error(\"Reset password error:\", err);\n    return res.status(400).json({ message: \"Invalid or expired token\" });\n  }\n};\n\nexport default ForgetPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}